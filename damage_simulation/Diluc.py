# Author: Kenny Seng
# Date: 1/20/2020
# Description: A program that represents Diluc from Genshin Impact

from character_stats import Details
import pandas as pd
from openpyxl import load_workbook

# Pulling hand-generated tables for each base stat seeing as how there were no public base stats or growth stats
# Tables are generated by calculating the growth stat @ each ascension per stat from known values at the first and last level of each ascension.
base_atk_table = pd.read_excel('diluc_base_stat_tables.xlsx', sheet_name = 'ATK_TABLE')
base_def_table = pd.read_excel('diluc_base_stat_tables.xlsx', sheet_name = 'DEF_TABLE')
base_hp_table = pd.read_excel('diluc_base_stat_tables.xlsx', sheet_name = 'HP_TABLE')

# A0 Level 0-20
a0_atk_table = base_atk_table['A0']
a0_def_table = base_def_table['A0']
a0_hp_table = base_hp_table['A0']
# A1 Level 20-40
a1_atk_table = base_atk_table['A1']
a1_def_table = base_def_table['A1']
a1_hp_table = base_hp_table['A1']
# A2 Level 40-50
a2_atk_table = base_atk_table['A2']
a2_def_table = base_def_table['A2']
a2_hp_table = base_hp_table['A2']
# A3 Level 50-60
a3_atk_table = base_atk_table['A3']
a3_def_table = base_def_table['A3']
a3_hp_table = base_hp_table['A3']
# A4 Level 60-70
a4_atk_table = base_atk_table['A4']
a4_def_table = base_def_table['A4']
a4_hp_table = base_hp_table['A4']
# A5 Level 70-80
a5_atk_table = base_atk_table['A5']
a5_def_table = base_def_table['A5']
a5_hp_table = base_hp_table['A5']
# A6 Level 80-90
a6_atk_table = base_atk_table['A6']
a6_def_table = base_def_table['A6']
a6_hp_table = base_hp_table['A6']

class Diluc(Details):
    def __init__(self, level=0, ascension=0, constellation=0):
        self.__name = "Diluc"
        self.__level = level
        self.__ascension = ascension
        self.__constellation = constellation
        self.__stats = Details()

        # Setting the base value of Details() via the tables generated
        self.reset_base_atk()
        self.reset_base_defense()
        self.reset_base_max_hp()

        self.__total_atk = self.__stats.get_base_stats().get_atk()

        self.__normal_atk_level = 1
        self.__elem_skill_level = 1
        self.__elem_burst_level = 1

        self.__elem_skill_cd = 0
        self.__elem_burst_cd = 0

        self.__dawn_active = False
        self.__dawn_enchant_dur = 8

      
    ### Getter/Setter Methods

    def get_level(self):
        return self.__level

    def set_level(self, new_level):
        self.__level = new_level

    def get_ascension(self):
        return self.__ascension

    def set_ascension(self, new_ascension):
        self.__ascension = new_ascension

    def get_constellation(self):
        return self.__constellation
    
    def inc_constellation(self, new_constellation):
        self.__constellation += 1

    def get_total_atk(self):
        return self.__total_atk

    def set_total_atk(self, new_total_atk):
        self.__total_atk = new_total_atk

    def get_normal_atk_level(self):
        return self.__normal_atk_level
    
    def inc_normal_atk_level(self):
        self.__normal_atk_level += 1

    def get_elem_skill_level(self):
        return self.__elem_skill_level
    
    def inc_elem_skill_level(self):
        self.__elem_skill_level += 1

    def get_elem_burst_level(self):
        return self.__elem_burst_level

    def inc_elem_burst_level(self):
        self.__elem_burst_level +=1 
   
    def get_stats(self):
        return self.__stats

    ###


    """Returns base_atk based on level + ascension"""
    def calc_base_atk(self):
        # A0 Level 0-20
        if self.__ascension == 0 and self.__level <= 20:
            return a0_atk_table[self.__level]
        elif self.__ascension == 0 and self.__level > 20:
            return("Error: Cannot be A0 with Level > 20")

        # A1 Level 20-40
        if self.__ascension == 1 and 20 <= self.__level <= 40:
            return a1_atk_table[self.__level-20]
        elif self.__ascension == 1 and (self.__level < 20 or self.__level > 40):
            return("Error: Cannot be A1 with Level > 40 or level < 20.")

        # A2 Level 40-50
        if self.__ascension == 2 and 40 <= self.__level <= 50:
            return a2_atk_table[self.__level-40]
        elif self.__ascension == 2 and (self.__level < 40 or self.__level > 50):
            return("Error: Cannot be A2 with Level > 50 or level < 40.")

        # A3 Level 50-60
        if self.__ascension == 3 and 50 <= self.__level <= 60:
            return a3_atk_table[self.__level-50]
        elif self.__ascension == 3 and (self.__level < 50 or self.__level > 60):
            return("Error: Cannot be A3 with Level > 60 or level < 50.")

        # A4 Level 60-70
        if self.__ascension == 4 and 60 <= self.__level <= 70:
            return a4_atk_table[self.__level-60]
        elif self.__ascension == 4 and (self.__level < 60 or self.__level > 70):
            return("Error: Cannot be A4 with Level > 70 or level < 60.")

        # A5 Level 70-80
        if self.__ascension == 5 and 70 <= self.__level <= 80:
            return a5_atk_table[self.__level-70]
        elif self.__ascension == 5 and (self.__level < 70 or self.__level > 80):
            return("Error: Cannot be A4 with Level > 80 or level < 70.")

        # A6 Level 80-90
        if self.__ascension == 6 and 80 <= self.__level <= 90:
            return a6_atk_table[self.__level-80]
        elif self.__ascension == 6 and (self.__level < 80 or self.__level > 90):
            return("Error: Cannot be A6 with Level > 90 or level < 80.")

    """Returns base_def based on level + ascension"""
    def calc_base_defense(self):
        # A0 Level 0-20
        if self.__ascension == 0 and self.__level <= 20:
            return a0_def_table[self.__level]
        elif self.__ascension == 0 and self.__level > 20:
            return("Error: Cannot be A0 with Level > 20")

        # A1 Level 20-40
        if self.__ascension == 1 and 20 <= self.__level <= 40:
            return a1_def_table[self.__level-20]
        elif self.__ascension == 1 and (self.__level < 20 or self.__level > 40):
            return("Error: Cannot be A1 with Level > 40 or level < 20.")

        # A2 Level 40-50
        if self.__ascension == 2 and 40 <= self.__level <= 50:
            return a2_def_table[self.__level-40]
        elif self.__ascension == 2 and (self.__level < 40 or self.__level > 50):
            return("Error: Cannot be A2 with Level > 50 or level < 40.")

        # A3 Level 50-60
        if self.__ascension == 3 and 50 <= self.__level <= 60:
            return a3_def_table[self.__level-50]
        elif self.__ascension == 3 and (self.__level < 50 or self.__level > 60):
            return("Error: Cannot be A3 with Level > 60 or level < 50.")

        # A4 Level 60-70
        if self.__ascension == 4 and 60 <= self.__level <= 70:
            return a4_def_table[self.__level-60]
        elif self.__ascension == 4 and (self.__level < 60 or self.__level > 70):
            return("Error: Cannot be A4 with Level > 70 or level < 60.")

        # A5 Level 70-80
        if self.__ascension == 5 and 70 <= self.__level <= 80:
            return a5_def_table[self.__level-70]
        elif self.__ascension == 5 and (self.__level < 70 or self.__level > 80):
            return("Error: Cannot be A4 with Level > 80 or level < 70.")

        # A6 Level 80-90
        if self.__ascension == 6 and 80 <= self.__level <= 90:
            return a6_def_table[self.__level-80]
        elif self.__ascension == 6 and (self.__level < 80 or self.__level > 90):
            return("Error: Cannot be A6 with Level > 90 or level < 80.")

    """Returns base_max_hp based on level + ascension"""
    def calc_base_max_hp(self):
        # A0 Level 0-20
        if self.__ascension == 0 and self.__level <= 20:
            return a0_hp_table[self.__level]
        elif self.__ascension == 0 and self.__level > 20:
            return("Error: Cannot be A0 with Level > 20")

        # A1 Level 20-40
        if self.__ascension == 1 and 20 <= self.__level <= 40:
            return a1_hp_table[self.__level-20]
        elif self.__ascension == 1 and (self.__level < 20 or self.__level > 40):
            return("Error: Cannot be A1 with Level > 40 or level < 20.")

        # A2 Level 40-50
        if self.__ascension == 2 and 40 <= self.__level <= 50:
            return a2_hp_table[self.__level-40]
        elif self.__ascension == 2 and (self.__level < 40 or self.__level > 50):
            return("Error: Cannot be A2 with Level > 50 or level < 40.")

        # A3 Level 50-60
        if self.__ascension == 3 and 50 <= self.__level <= 60:
            return a3_hp_table[self.__level-50]
        elif self.__ascension == 3 and (self.__level < 50 or self.__level > 60):
            return("Error: Cannot be A3 with Level > 60 or level < 50.")

        # A4 Level 60-70
        if self.__ascension == 4 and 60 <= self.__level <= 70:
            return a4_hp_table[self.__level-60]
        elif self.__ascension == 4 and (self.__level < 60 or self.__level > 70):
            return("Error: Cannot be A4 with Level > 70 or level < 60.")

        # A5 Level 70-80
        if self.__ascension == 5 and 70 <= self.__level <= 80:
            return a5_hp_table[self.__level-70]
        elif self.__ascension == 5 and (self.__level < 70 or self.__level > 80):
            return("Error: Cannot be A4 with Level > 80 or level < 70.")

        # A6 Level 80-90
        if self.__ascension == 6 and 80 <= self.__level <= 90:
            return a6_hp_table[self.__level-80]
        elif self.__ascension == 6 and (self.__level < 80 or self.__level > 90):
            return("Error: Cannot be A6 with Level > 90 or level < 80.")

    """Sets base_atk to default value based on level + ascension"""
    def reset_base_atk(self):
        self.get_stats().get_base_stats().set_atk(self.calc_base_atk())

    """Sets base_def to default value based on level + ascension"""
    def reset_base_defense(self):
        self.get_stats().get_base_stats().set_defense(self.calc_base_defense())

    """Sets base_max_hp to default value based on level + ascension"""
    def reset_base_max_hp(self):
        self.get_stats().get_base_stats().set_max_hp(self.calc_base_max_hp())

    """Tempered Sword"""
    def normal_attack(self, num=1, time=1):
        # Determine duration of each attack later
        total_atk = self.get_total_atk()
        n_atk_lvl = self.get_normal_atk_level()
        
        n_1 = [89.7, 97, 104.3, 114.73, 122.03, 130.38, 141.85, 153.32, 164.79,	177.31,	191.65,	208.52,	225.38,	242.25,	260.65]
        n_2 = [87.63, 94.77, 101.9,	112.09,	119.22,	127.38,	138.58,	149.79,	161, 173.23, 187.24, 203.72, 220.2,	236.67,	254.65]
        n_3 = [98.81, 106.86, 114.9, 126.39, 134.43, 143.63, 156.26, 168.9 , 181.54, 195.33, 211.13, 229.71, 248.29, 266.87, 287.14]
        n_4 = [133.99, 144.89, 155.8, 171.38, 182.29, 194.75, 211.89, 229.03, 246.16, 264.86, 286.28, 311.48, 336.67, 361.86, 389.34]
        normal = [n_1, n_2, n_3, n_4]

        if num == 1:
            return normal[1][n_atk_lvl]*total_atk/100
        elif num == 2:
            return self.normal_attack(1) + normal[1][n_atk_lvl]*total_atk/100
        elif num == 3:
            return self.normal_attack(2) + normal[2][n_atk_lvl]*total_atk/100
        else: # num == 4:
            return self.normal_attack(3) + normal[3][n_atk_lvl]*total_atk/100

    def charged_attack(self, time=1):
        # Charged attacks do the same amount of damage until the last tick, last tick calculated separately.
        total_atk = self.get_total_atk()
        n_atk_lvl = self.get_normal_atk_level()

        charged_dmg = [68.8, 74.4, 80, 88, 93.6, 100, 108.8, 117.6, 126.4, 136, 147, 159.94, 172.87, 185.81, 199.92]
        final_dmg = [124.7, 134.85, 145, 159.5, 169.65, 181.25, 197.2, 213.15, 229.1, 246.5, 266.44, 289.88, 313.33, 336.78, 362.36]

        # assuming time is a whole integer (Second), will have to round later on

        # A0 : Relentless Locked
        if(self.get_ascension() == 0):
            if(time<=5):
                for num in range(time):
                    # Decrease stamina 40/s
                    self.get_stats().get_base_stats().set_max_stamina(self.get_stats().get_base_stats().get_max_stamina()-40)
                    print(total_atk*charged_dmg[n_atk_lvl]/100) 
                print(total_atk*final_dmg[n_atk_lvl]/100)
            else:
                print("Duration cannot exceed five seconds")
        # A1: Relentless Unlocked
        # "Diluc's Charged Attack Stamina Cost is decreased by 50%, and its duration is increased by 3s."
        else: 
            if(time<=8):
                for num in range(time):
                    # Decrease stamina 20/s
                    self.get_stats().get_base_stats().set_max_stamina(self.get_stats().get_base_stats().get_max_stamina()-20)
                    print(total_atk*charged_dmg[n_atk_lvl]/100) 
                print(total_atk*final_dmg[n_atk_lvl]/100)
            else:
                print("Duration cannot exceed eight seconds")

    # Unsure what value is used - may be velocity as opposed to height
    # norm plunge + low/high plunge
    def plunged_attack(self, height):
        total_atk = self.get_total_atk()
        norm_plunge = [89.51, 96.79, 104.08, 114.48, 121.77, 130.1, 141.54, 152.99, 164.44, 176.93, 189.42, 201.91, 214.4, 226.89, 239.37]
        low_plunge  = [178.97, 193.54, 208.11, 228.92, 243.49, 260.13, 283.03, 305.92, 328.81, 353.78, 378.76, 403.73, 428.7, 453.68, 478.65]
        high_plunge = [223.55, 241.74, 259.94, 285.93, 304.13, 324.92, 353.52, 382.11, 410.7, 441.89, 473.09, 504.28, 535.47, 566.66, 597.86]

        if height > 100:
            return total_atk * (norm_plunge[self.get_normal_atk_level()] + high_plunge[self.get_normal_atk_level()])/100
        else:
            return total_atk * (norm_plunge[self.get_normal_atk_level()] + low_plunge[self.get_normal_atk_level()])/100

    # Searing Onslaught
    def elem_skill(self, num=1):
        total_atk = self.get_total_atk()
        es_lvl = self.get_elem_skill_level()
        
        # 10-15 values ? ?
        es_1 = [94.4, 101, 109, 118, 125, 132, 142, 151, 160, 170]
        es_2 = [97.6, 105, 112, 122, 129, 137, 146, 156, 166, 176]
        es_3 = [129, 138, 148, 161, 171, 180, 193, 206, 219, 232]
        elem_skill = [es_1, es_2, es_3]

        if num == 1:
            return (elem_skill[0][es_lvl]*total_atk)/100
        elif num == 2:
            return (self.elem_skill(1) + elem_skill[1][es_lvl]*total_atk)/100
        elif num == 3:
            return (self.elem_skill(2) + elem_skill[2][es_lvl]*total_atk)/100

    # Dawn
    def elem_burst(self):
        total_atk = self.get_total_atk()
        eb_lvl = self.get_elem_burst_level()

        #cd = 12
        #enchant_dur = 8
        #energy_cost = 40

        # 10-15 values ? ?
        slash_dmg = [204, 219, 235, 255, 270, 286, 306, 326, 347]
        # videos look like 2 seconds of dot dmg
        dot_dmg = [60, 64.5, 69, 75, 79.5, 84, 90, 96, 102]
        explosion_dmg = [204, 219, 235, 255, 270, 286, 306, 326, 347]
        elem_burst = [slash_dmg, dot_dmg, explosion_dmg]
        # slash + dot(2s) + explosion
        return total_atk*(slash_dmg[eb_lvl] + 2*dot_dmg[eb_lvl] + explosion_dmg[eb_lvl])/100

    #Prints details about <Character>
    def print(self):
        print("Name: " + self.__name)
        print("Level: " + str(self.get_level()))
        print("Ascension: " + str(self.get_ascension()))
        print("Constellation " + str(self.get_constellation()))
        self.get_stats().print_base_stats()


# Tests working as intended

"""
print_base_atk(20,0) # 68
print_base_atk(40,1) # 135
print_base_atk(50,2) # 173
print_base_atk(60,3) # 217
print_base_atk(70,4) # 256
print_base_atk(80,5) # 295
print_base_atk(90,6) # 335
"""

diluc = Diluc(90, 6, 0)
diluc.print()

print("Normal Atk[1]:" + str(diluc.normal_attack(1)))
print("Normal Atk[1+2]:" + str(diluc.normal_attack(2)))
print("Normal Atk[1+2+3]:" + str(diluc.normal_attack(3)))
print("Normal Atk[1+2+3+4]:" + str(diluc.normal_attack(4)))

diluc.charged_attack(5)

print("Elemental Skill[1]: " + str(diluc.elem_skill(1)))
print("Elemental Skill[2]: " + str(diluc.elem_skill(2)))
print("Elemental Skill[3]: " + str(diluc.elem_skill(3)))
print("Elemental Burst[Total] :" + str(diluc.elem_burst()))

